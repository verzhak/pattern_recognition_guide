
#include "all.hpp"

const unsigned lwh = 20;

void translate(string fname, string prog, unsigned height, unsigned width);
void execute(string fname);

int main(const int argc, const char * argv[])
{
	int ret = 0;

	try
	{
		char fname[4096];
		unsigned u, prog_nip_num = 0;
		vector<string> prog;
		vector<unsigned> height;
		vector<unsigned> width;

		// Hello, World!
		prog.push_back("++++++[>++++++++++++<-]>.>++++++++++[>++++++++++<-]>+.+++++++..+++.>++++[>+++++++++++<-]>.<+++[>----<-]>.<<<<<+++[>+++++<-]>.>>.+++.------.--------.>>+.");
		height.push_back(1);
		width.push_back((prog.end() - 1)->size());

		// Числа Фибоначчи
		prog.push_back("+++++++++++>+>>>>++++++++++++++++++++++++++++++++++++++++++++>++++++++++++++++++++++++++++++++<<<<<<[>[>>>>>>+>+<<<<<<<-]>>>>>>>[<<<<<<<+>>>>>>>-]<[>++++++++++[-<-[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<[>>>+<<<-]>>[-]]<<]>>>[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<+>>[-]]<<<<<<<]>>>>>[++++++++++++++++++++++++++++++++++++++++++++++++.[-]]++++++++++<[->-<]>++++++++++++++++++++++++++++++++++++++++++++++++.[-]<<<<<<<<<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+>-]>[<+>-]<<<-]");
		height.push_back(1);
		width.push_back((prog.end() - 1)->size());

		// Факториал
		prog.push_back("+++++++++++++++++++++++++++++++++>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>++++++++++>++++++>>+<<[>++++++++++++++++++++++++++++++++++++++++++++++++.------------------------------------------------<<<<.-.>.<.+>>>>>>>++++++++++<<[->+>-[>+>>]>[+[-<+>]>+>>]<<<<<<]>[<+>-]>[-]>>>++++++++++<[->-[>+>>]>[+[-<+>]>+>>]<<<<<]>[-]>>[++++++++++++++++++++++++++++++++++++++++++++++++.[-]]<[++++++++++++++++++++++++++++++++++++++++++++++++.[-]]<<<++++++++++++++++++++++++++++++++++++++++++++++++.[-]<<<<<<.>>+>[>>+<<-]>>[<<<[>+>+<<-]>>[<<+>>-]>-]<<<<-]");
		height.push_back(1);
		width.push_back((prog.end() - 1)->size());

		// 99 бутылок пива
		prog.push_back(">+++++++++[<+++++++++++>-]<[>[-]>[-]<<[>+>+<<-]>>[<<+>>-]>>>[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<++++++++++>>>+<-]<<-<-]+++++++++>[<->-]>>+>[<[-]<<+>>>-]>[-]+<<[>+>-<<-]<<<[>>+>+<<<-]>>>[<<<+>>>-]>[<+>-]<<-[>[-]<[-]]>>+<[>[-]<-]<++++++++[<++++++<++++++>>-]>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>[-]>[-]++++[<++++++++>-]<.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++++[<---------->-]<--.>+++++++++[<+++++++++>-]<--.-.>++++++++[<---------->-]<++.>++++++++[<++++++++++>-]<++++.------------.---.>+++++++[<---------->-]<+.>++++++++[<+++++++++++>-]<-.>++[<----------->-]<.+++++++++++..>+++++++++[<---------->-]<-----.---.>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>>++++[<++++++>-]<--.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++++++[<---------->-]<-.---.>+++++++[<++++++++++>-]<++++.+++++++++++++.++++++++++.------.>+++++++[<---------->-]<+.>++++++++[<++++++++++>-]<-.-.---------.>+++++++[<---------->-]<+.>+++++++[<++++++++++>-]<--.+++++++++++.++++++++.---------.>++++++++[<---------->-]<++.>+++++[<+++++++++++++>-]<.+++++++++++++.----------.>+++++++[<---------->-]<++.>++++++++[<++++++++++>-]<.>+++[<----->-]<.>+++[<++++++>-]<..>+++++++++[<--------->-]<--.>+++++++[<++++++++++>-]<+++.+++++++++++.>++++++++[<----------->-]<++++.>+++++[<+++++++++++++>-]<.>+++[<++++++>-]<-.---.++++++.-------.----------.>++++++++[<----------->-]<+.---.[-]<<<->[-]>[-]<<[>+>+<<-]>>[<<+>>-]>>>[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<++++++++++>>>+<-]<<-<-]+++++++++>[<->-]>>+>[<[-]<<+>>>-]>[-]+<<[>+>-<<-]<<<[>>+>+<<<-]>>>[<<<+>>>-]<>>[<+>-]<<-[>[-]<[-]]>>+<[>[-]<-]<++++++++[<++++++<++++++>>-]>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>[-]>[-]++++[<++++++++>-]<.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++++[<---------->-]<--.>+++++++++[<+++++++++>-]<--.-.>++++++++[<---------->-]<++.>++++++++[<++++++++++>-]<++++.------------.---.>+++++++[<---------->-]<+.>++++++++[<+++++++++++>-]<-.>++[<----------->-]<.+++++++++++..>+++++++++[<---------->-]<-----.---.+++.---.[-]<<<]");
		height.push_back(1);
		width.push_back((prog.end() - 1)->size());

		// Треугольник
		prog.push_back(">++++[<++++++++>-]>++++++++[>++++<-]>>++>>>+>>>+<<<<<<<<<<[-[->+<]>[-<+>>>.<<]>>>[[->++++++++[>++++<-]>.<<[->+<]+>[->++++++++++<<+>]>.[-]>]]+<<<[-[->+<]+>[-<+>>>-[->+<]++>[-<->]<<<]<<<<]++++++++++.+++.[-]<]+++++");
		height.push_back(1);
		width.push_back((prog.end() - 1)->size());

		// Квайн
		prog.push_back("-->+++>+>+>+>+++++>++>++>->+++>++>+>>>>>>>>>>>>>>>>->++++>>>>->+++>+++>+++>+++>+++>+++>+>+>>>->->>++++>+>>>>->>++++>+>+>>->->++>++>++>++++>+>++>->++>++++>+>+>++>++>->->++>++>++++>+>+>>>>>->>->>++++>++>++>++++>>>>>->>>>>+++>->++++>->->->+++>>>+>+>+++>+>++++>>+++>->>>>>->>>++++>++>++>+>+++>->++++>>->->+++>+>+++>+>++++>>>+++>->++++>>->->++>++++>++>++++>>++[-[->>+[>]++[<]<]>>+[>]<--[++>++++>]+[<]<<++]>>>[>]++++>++++[--[+>+>++++<<[-->>--<<[->-<[--->>+<<[+>+++<[+>>++<<]]]]]]>+++[>+++++++++++++++<-]>--.<<<]");
		height.push_back(1);
		width.push_back((prog.end() - 1)->size());

		throw_if(argc != 2);

		if(! (strcmp(argv[1], "translate") && strcmp(argv[1], "t")))
		{
			for(u = 0; u < prog.size(); u++)
			{
				sprintf(fname, "%s/program/%u.png", DATA_DIR, prog_nip_num + u + 1);

				translate(fname, prog[u], height[u], width[u]);
			}
		}
		else if(! (strcmp(argv[1], "execute") && strcmp(argv[1], "e")))
		{
			for(u = 0; u < prog_nip_num + prog.size(); u++)
			{
				sprintf(fname, "%s/program/%u.png", DATA_DIR, u + 1);

				printf("\n### RUN %s ###\n", fname);
				execute(fname);
			}

			printf("\n#########\n\n");
		}
		else
			throw_if(1);
	}
	catch(...)
	{
		ret = -1;

		printf("\nФормат вызова: ./program ACTION\n\nГде:\n\n\tACTION - действие (t, translate - трансляция всех программ из символьной записи в запись на языке brainloller; e, execute - выполнение всех программ).\n\n");
	}

	return ret;
}

void translate(string fname, string prog, unsigned height, unsigned width)
{
	unsigned v, u, t, tv, tu;
	Vec3b color;
	Mat dst(height * lwh, width * lwh, CV_8UC3);

	throw_null(dst.data);

	for(v = 0, t = 0; v < height; v++)
		for(u = 0; u < width; u++, t++)
		{
			switch(prog[t])
			{
				case '+':
				{
					color[0] = 0x00;
					color[1] = 0xFF;
					color[2] = 0x00;

					break;
				}
				case '-':
				{
					color[0] = 0x00;
					color[1] = 0x80;
					color[2] = 0x00;

					break;
				}
				case '>':
				{
					color[0] = 0xFF;
					color[1] = 0x00;
					color[2] = 0x00;

					break;
				}
				case '<':
				{
					color[0] = 0x80;
					color[1] = 0x00;
					color[2] = 0x00;

					break;
				}
				case '[':
				{
					color[0] = 0xFF;
					color[1] = 0xFF;
					color[2] = 0x00;

					break;
				}
				case ']':
				{
					color[0] = 0x80;
					color[1] = 0x80;
					color[2] = 0x00;

					break;
				}
				case '.':
				{
					color[0] = 0x00;
					color[1] = 0x00;
					color[2] = 0xFF;

					break;
				}
				case ',':
				{
					color[0] = 0x00;
					color[1] = 0x00;
					color[2] = 0x80;

					break;
				}
				case '!': // Поворот против часовой стрелки
				{
					color[0] = 0x00;
					color[1] = 0xFF;
					color[2] = 0xFF;

					break;
				}
				case '?': // Поворот по часовой стрелке
				{
					color[0] = 0x00;
					color[1] = 0x80;
					color[2] = 0x80;

					break;
				}
			}

			for(tv = v * lwh; tv < (v + 1) * lwh; tv++)
				for(tu = u * lwh; tu < (u + 1) * lwh; tu++)
					dst.at<Vec3b>(tv, tu) = color;
		}

	imwrite(fname, dst);
}

int step(char dir, int & v, int & u, Size src_size);

void execute(string fname)
{
	const unsigned mem_size = 4096;
	int v, u, t;
	char next_dir, dir = 'r';
	unsigned char mem[mem_size];
	unsigned char * pnt = mem;
	Mat src;
	Vec3b color, next_color;

	memset(mem, 0, sizeof(unsigned char) * mem_size);

	src = imread(fname);
	throw_null(src.data);

	v = 0;
	u = 0;
	
	do
	{
		color = src.at<Vec3b>(v, u);

		if((color[0] == 0x00) && (color[1] == 0xFF) && (color[2] == 0x00))
			(* pnt)++;
		else if((color[0] == 0x00) && (color[1] == 0x80) && (color[2] == 0x00))
			(* pnt)--;
		else if((color[0] == 0xFF) && (color[1] == 0x00) && (color[2] == 0x00))
		{
			pnt++;

			throw_if((mem + mem_size <= pnt))
		}
		else if((color[0] == 0x80) && (color[1] == 0x00) && (color[2] == 0x00))
		{
			pnt--;

			throw_if((pnt < mem));
		}
		else if((color[0] == 0xFF) && (color[1] == 0xFF) && (color[2] == 0x00))
		{
			if((* pnt) <= 0)
			{
				t = 0;
				
				next_color[0] = 0x80;
				next_color[1] = 0x80;
				next_color[2] = 0x00;

				do
				{
					throw_if(step(dir, v, u, src.size()));

					if(src.at<Vec3b>(v, u) == color)
						t++;
					else if(src.at<Vec3b>(v, u) == next_color)
						t--;
				}
				while(t >= 0);
			}
		}
		else if((color[0] == 0x80) && (color[1] == 0x80) && (color[2] == 0x00))
		{
			switch(dir)
			{
				case 'r':
				{
					next_dir = 'l';

					break;
				}
				case 'l':
				{
					next_dir = 'r';

					break;
				}
				case 't':
				{
					next_dir = 'b';

					break;
				}
				case 'b':
				{
					next_dir = 't';

					break;
				}
			}

			t = 0;
				
			next_color[0] = 0xFF;
			next_color[1] = 0xFF;
			next_color[2] = 0x00;

			do
			{
				throw_if(step(next_dir, v, u, src.size()));

				if(src.at<Vec3b>(v, u) == color)
					t++;
				else if(src.at<Vec3b>(v, u) == next_color)
					t--;
			}
			while(t >= 0);

			step(next_dir, v, u, src.size());
		}
		else if((color[0] == 0x00) && (color[1] == 0x00) && (color[2] == 0xFF))
			printf("%c", * pnt);
		else if((color[0] == 0x00) && (color[1] == 0x00) && (color[2] == 0x80))
			scanf("%c\n", pnt);
		else if((color[0] == 0x00) && (color[1] == 0xFF) && (color[2] == 0xFF))
		{
			// Поворот против часовой стрелки

			switch(dir)
			{
				case 'r':
				{
					next_dir = 't';

					break;
				}
				case 'l':
				{
					next_dir = 'b';

					break;
				}
				case 't':
				{
					next_dir = 'l';

					break;
				}
				case 'b':
				{
					next_dir = 'r';

					break;
				}
			}

			dir = next_dir;
		}
		else if((color[0] == 0x00) && (color[1] == 0x80) && (color[2] == 0x80))
		{
			// Поворот по часовой стрелке

			switch(dir)
			{
				case 'r':
				{
					next_dir = 't';

					break;
				}
				case 'l':
				{
					next_dir = 't';

					break;
				}
				case 't':
				{
					next_dir = 'r';

					break;
				}
				case 'b':
				{
					next_dir = 'l';

					break;
				}
			}

			dir = next_dir;
		}
		else
			throw_if(1);
	}
	while(! step(dir, v, u, src.size()));
}

int step(char dir, int & v, int & u, Size src_size)
{
	switch(dir)
	{
		case 'r':
		{
			u += lwh;

			break;
		}
		case 'l':
		{
			u -= lwh;

			break;
		}
		case 't':
		{
			v -= lwh;

			break;
		}
		case 'b':
		{
			v += lwh;

			break;
		}
	}

	if((v >= 0) && (v < src_size.height) && (u >= 0) && (u < src_size.width))
		return 0;

	return 1;
}

